-- base64 format: [encoded: ICFP string] [prefix: ICFP integer]
-- encoded string is decoded to LRDU string and then first prefix characters are taken

-- Finally take prefix
BT

-- String length
@I9622

-- Pass the encoded string
B$

-- Bind the expanded dictionary
B$
L#
  -- Make the recursive function of Decode
  B$
    Lf B$ Lx B$ vf B$ vx vx Lx B$ vf B$ vx vx -- Fix

      -- Decode :: Self -> String -> String
      -- Decodes the first entry in the source then recursively process the rest.
      Ld Ls
        ? ( B= vs @I4 )
          S
          B.
            BT @I2 BD (B* @I2 B% vs @I4) v# -- Decode the first entry
            (B$ vd (B/ vs @I4)) -- Process the rest

-- Expand the compressed dictionary
-- The compressed data must contain a non-zero sentinel in the end.
BT @I8
-- Apply the compressed dictionary to obtain the dict
B$

-- Make the recursive Expand function
B$
-- Fix
Lf B$ Lx B$ vf B$ vx vx Lx B$ vf B$ vx vx

-- Expand :: Self -> Int -> String
Le Lp
  ? (B= vp @I0)
    S
    B.
      BT @I1 BD (B% vp @I4) @SLRDU
      B$ ve (B/ vp @I4)
@I89866

-- Encoded string
@I150988358791920951443928517898127451390141147550697012681121152548859170425112427542750072372479949218137960872884517074464002641314245343805891910241109120979168953756261747060111692336299796880330986967253984495377538361116893703161255952758019200172977171843217547064473286904012653507896639010418992780777948659876705668148380659985679097993648563679079271236874236705064478313571974814499529518252215516131655301408860851879169967580172970730427629928597219784961500574839369478312744249723696741120193774056333918738588634449721932060526884387841035108732432970230706178181910068908107422763316063303374412842546151539800954031521400211845668680251005027942919155359884058530074151750972340554785289498992641095532648691654181828950416186456969149994467659558955183501638110206295933477348299038326037565929161918387328047421325230506162262540999169095509897311401136138788892821703240579289814951531882092235318969170133710002226017879471892076176237515498985883520309724786504211442556164453288462054234017600899805224629443688775661361578083907135162863151091023240122802846953386786356325022248433829006140304194108649850622399235569589262377373740076241075045305722701157038348667900042726639853659927276142882853490491158526640444010061084302288644727999142570757455511079959680870845307293456576112938903646273436980111609166731671693575464423258021433697089287816056599776387181229769470327335612195725806167307685024947925628500361717866692620587538614594064472111743339083802067948973363322081258521706841688979996969750052698360088063822234530797577309102603344524221930123999523253915327448256778339001276383651864804402320764468899838279826975010823288578747637090312497513701682718010241227909633654411045605081853874967149095594499131648183818232501930625434415000216191590475234497755505115283388766413442756785466771946785661615372881913161661918002301947690000410358490465120724318799087471189361044812673513480279084474268905526611319503870214733758402858756533420067529386356229569471249938672069165230563509276848564773534735738638355678322797564057693368089556077072181861503423332044970700889943274532150197281461661293821886947395255460025272836641610185278180219274206602908421709187695329592176408985188290814346533261224211529860739507239074280279257495690459643708765472534760836253759092066745319082445941966514376724907864080248958361506677844659634431371107719159692267508625276403303625590473421473769452116400979759644256205999863012953793048696926472261568563022706636616582685369486007371516635588140513588224705051219311507920756169174630185759288482241665611956634199368736008690551160975840826119539104599752659986869776309560590478261724435498523512357729722311508979916568251861190366822835639425708801236084536224596320883417891774035831025609493251176293394380736838702049277086437253318971115766750063987003979124679387847138213273219315843012608868


