-- base64 format: [encoded: ICFP string] [prefix: ICFP integer]
-- encoded string is decoded to LRDU string and then first prefix characters are taken

-- Finally take prefix
BT

-- String length
@I9518

-- Pass the encoded string
B$

-- Bind the expanded dictionary
B$
L#
  -- Make the recursive function of Decode
  B$
    Lf B$ Lx B$ vf B$ vx vx Lx B$ vf B$ vx vx -- Fix

      -- Decode :: Self -> String -> String
      -- Decodes the first entry in the source then recursively process the rest.
      Ld Ls
        ? ( B= vs @I4 )
          S
          B.
            BT @I2 BD (B* @I2 B% vs @I4) v# -- Decode the first entry
            (B$ vd (B/ vs @I4)) -- Process the rest

-- Expand the compressed dictionary
-- The compressed data must contain a non-zero sentinel in the end.
BT @I8
-- Apply the compressed dictionary to obtain the dict
B$

-- Make the recursive Expand function
B$
-- Fix
Lf B$ Lx B$ vf B$ vx vx Lx B$ vf B$ vx vx

-- Expand :: Self -> Int -> String
Le Lp
  ? (B= vp @I0)
    S
    B.
      BT @I1 BD (B% vp @I4) @SLRDU
      B$ ve (B/ vp @I4)
@I110416

-- Encoded string
@I6701683011625002778134602839255908488942940279866275749778799481750394446201845776643895151226438145827267251881047529342125072716122813323037726811253072307112830725044857838955433329853953393119455555890470715382999583024494938639967625249385252541941786359176164714750638814632823948041555073646047379654636479530353130990620919240162664200978680501963475365651689409782471150112411999128995270873183401385611477852450919278051015257719858843457892911942366354179734240590266363893420322886490690295976495674755104870909656298137199091919368562647591523461018899212431545379098906959328898264603601490396170016271197370971064421121733327567120558831489114570985348526110081310932243491619304542313017930950722353996271162191576765211773108288368783564729172376553415061532514197135081054983156320282081702217808096309921326541852699084532443471068381743304033059996584510344731913380286404295142144114017823542503610227258244460482959121514348665326048374164174247283571135232875517314759446384110764065042401362938691899906278218509289810751513818844016425183201207469726201372440420947636354651876277138004501714757231201543515157691838525655393951031007631171923534665702451688088473371096927623292317338534333060103422143904769883753507915503858938948492572445334607271495541692953068628594867718590438123826309002581802981027392592393633224221994138480459599281817788206302633806640860787185491713500629675596244523981422133396055833374229219360726758096270659124799070218789860032676349558700695694732912934931513478062335045097977759017350005342244310831319536027426143972241818605491187299860734164106390438328087290654883131615050787925631272070604109520936720743491362805634281361715743022964442332435451596743713056205442801490328216646295568516018142947228886642309873625202166362684298679511961293292555391145112818558308561222033736405494640890289915837889024894207482947792134668579078089995661433245204943376415550479612699085945849525358992726695842067452420037975903711380684671449125081308020296418148331654508920573336459484960659809147942502754500536908499505652830295189212017223375288863149825099790732591662060567410203767627243972295026293983994419989357578340965060335972002045004936914633721659791219988213965072326922071231131912727292039271583581670306150751987827130975448863843777522427288318014445988046862592615947777899860472328044055999543768082864506373637297517848009940435264441553467524541414836590991938656859120839147295009245267372804630161330341517858909257129291077180442454581553497861978662477999057559798742251248814373947423763066321986835734050983894498771014006717710665868513745494584617091058805368331135810230908673924756331873660477362224345197425862403864901655942378937891593023397610484207618607768576723774034853192361960715637847208682406490865166059332076252260689917502802016499924350641827626733216676


