-- base64 format: [encoded: ICFP string] [prefix: ICFP integer]
-- encoded string is decoded to LRDU string and then first prefix characters are taken

-- Finally take prefix
BT

-- String length
@I9562

-- Pass the encoded string
B$

-- Bind the expanded dictionary
B$
L#
  -- Make the recursive function of Decode
  B$
    Lf B$ Lx B$ vf B$ vx vx Lx B$ vf B$ vx vx -- Fix

      -- Decode :: Self -> String -> String
      -- Decodes the first entry in the source then recursively process the rest.
      Ld Ls
        ? ( B= vs @I4 )
          S
          B.
            BT @I2 BD (B* @I2 B% vs @I4) v# -- Decode the first entry
            (B$ vd (B/ vs @I4)) -- Process the rest

-- Expand the compressed dictionary
-- The compressed data must contain a non-zero sentinel in the end.
BT @I8
-- Apply the compressed dictionary to obtain the dict
B$

-- Make the recursive Expand function
B$
-- Fix
Lf B$ Lx B$ vf B$ vx vx Lx B$ vf B$ vx vx

-- Expand :: Self -> Int -> String
Le Lp
  ? (B= vp @I0)
    S
    B.
      BT @I1 BD (B% vp @I4) @SLRDU
      B$ ve (B/ vp @I4)
@I88591

-- Encoded string
@I132504701310775674911690381848396878622969346313980401470421678994705352794077004879102200294058734218790312267559360956825659834702681934730227178883965487232082164795910870635557541021146556619740535369912803551543348941941577806014122257723053685297083675684809407356233089334402911904172909080195499257872087378780738320056530665928664180978711330133242866480215840540109525996417476414978467734059669911474231819708809316180775072206371677521324962356451112667379594661684926488036608958512432728373158975685737782012901070873823065000964349797628767936340887280207473078436018484200041119683064178108743875955034678572122205413972897137056272781253076343015048793243370184667080082387774756991983712662940079909010186018730923145742621460601143878388266734176487928696927515905479960251776063696236847091649283904437963654881987044672819563128794498536705054050326419467388452186522089777842880849188513456111927966310999831196568405590504779983989586941036421644422182752023656371950803849786904007880219929343310526061913709967185630591977100771700334589976374319122599816602649822649489123313686606384202186169549676201677298487558275122832872040739294183466526388920506823997413985325592634886855258810480831136864793359118617127272345262549676828535742618766176973929342768656559859247687406922388014488375342618056080256877124973760398604023298354554605895543673663016507235434538729732724321099201760468186063896498989114848094657830605333388439226849303873089360449595170116488005731762767039886692790547458363867688364938272503666627877312903145929384607040949669483858514432066759801694369108877972501957494058075444507846160130137462870254906965682171330772326039217961035765816709144629784486989845807804316928159993203346658831474323069139929964214247536398686599682139971857511732479645252681606539103083158423653657419278405976117766646946599658007248769237248245681676287714630157919072045967934506462150000303075769875271616749878278000384415446263009343511926262549586967881758465774231714338148697844811002067422031129577032436278355234080885409633870004399029075999643591682469048998599072823723964464878607129576818718221290594365432479845141660749599941076052554245408072464087576438338045256067001758273614662604135774970913730288353140755311417729810329170676205750858453955107633789538861947504794438188243032582352722822074751129860146638153955615381453313523712367223553778528727666358513170494670963389538899823789085663328776918046418797347788661274741668396956272637270856566193648698671744816829186174352591303439577128721711789394522896795474054165985662177632421427767238754044977338284295995143092674844752266802352152350480452809140421676868076333768847523142658682166826362432097238860319008735125518906677311590983532020114368355004246224213395307277358065129564687554630618575036781250815538993213408621978988964525267039997512867604564


