-- base64 format: [encoded: ICFP string] [prefix: ICFP integer]
-- encoded string is decoded to LRDU string and then first prefix characters are taken

-- Finally take prefix
BT

-- String length
@I9594

-- Pass the encoded string
B$

-- Bind the expanded dictionary
B$
L#
  -- Make the recursive function of Decode
  B$
    Lf B$ Lx B$ vf B$ vx vx Lx B$ vf B$ vx vx -- Fix

      -- Decode :: Self -> String -> String
      -- Decodes the first entry in the source then recursively process the rest.
      Ld Ls
        ? ( B= vs @I4 )
          S
          B.
            BT @I2 BD (B* @I2 B% vs @I4) v# -- Decode the first entry
            (B$ vd (B/ vs @I4)) -- Process the rest

-- Expand the compressed dictionary
-- The compressed data must contain a non-zero sentinel in the end.
BT @I8
-- Apply the compressed dictionary to obtain the dict
B$

-- Make the recursive Expand function
B$
-- Fix
Lf B$ Lx B$ vf B$ vx vx Lx B$ vf B$ vx vx

-- Expand :: Self -> Int -> String
Le Lp
  ? (B= vp @I0)
    S
    B.
      BT @I1 BD (B% vp @I4) @SLRDU
      B$ ve (B/ vp @I4)
@I90016

-- Encoded string
@I563807757628826635337817654636731558442338995228823001173392389760229778322299025272121212325817935294188409539306223777412207656447470393946650661883711808022544198436027308785731628796393266369505114100689533198265061651905632787404356189606108608507478340763548809040701465673681336911964406107873740914768086829832787484076684811082919857967214769800633428987254391658203489586695851835805358469681941850077928255514871138323260381209938274487073783512946643161373459538093889317005231198253458378289737643454415160739528560576631589820619986552230421345825650252540860586300745881172216146095000808244748907508248720646116652260757475138976297822652767206607589141130137325286380447442194970389353090909726985785592145028712711965038798147120089957636043102568967834731888541287245939899891059316806617792563527461853592580938424764089127998564820709889049580589265485230220529118917002155408336658615554757128979648964872268372951396728460326520102243247349181424353772099956460907461447800869377607581852587509280207783365405548916903438518135923509243428118056045512147374077776964410624026653914184191103091941363909264667837509539716959833640494423516157309309527623896007617310999330190205862045048669084782832801901773258757922870202758186615487515636521867540522240111811197699776742416936973361218829436168152705726060690983200906366198118046118818640709076882197277010855706163547425858307543192526887643332689516337401474682564813132042886467338134149652787428499036406093753545726163057208379521159848574563374558706108211109136389224560163780597575752503926241013857798982742169183192226463739764837958231601282885463018990907329768111325058015761560978809508825349600056671477919175682736214691949048429549546514972904739935408133284134394586950072103361356200277026524392404121015732770711169171956179886821715127130491422395583010563111505382192956582207055210448016038635130600570984768348752411618649831154950088137517201731908851538487863378942505711815207412582363634602469549013183813926582968715362038032291872692875733845245248186310213131169340703286822773079860170454148714648748803444178476621091031883437222770615912000440175032935345383948715804510875812521750356282110716631659852306112726339441858979376197660449788249686700890803662442773354196208671698323758656994281060231955232254496317444687161711412630547986370512995327492338318578075500581957269340207942441554411916555488628677692271761422334372713411648305501706308970388306299995807618236526201170708785593403231419518494897354653793625523175991845441966145468301519760183056884804998513282349514147647577917083058171901903445483815880303962705447770991340203319049737823314051470473780709201392216835808889505135647860223529419329819149657383527138944442109883582636205603294931190986078723930911151246200270740043900146194889315249098934677648489849531493035992038869412436440080285874554384


