-- base64 format: [encoded: ICFP string] [prefix: ICFP integer]
-- encoded string is decoded to LRDU string and then first prefix characters are taken

-- Finally take prefix
BT

-- String length
@I8190

-- Pass the encoded string
B$

-- Bind the expanded dictionary
B$
L#
  -- Make the recursive function of Decode
  B$
    Lf B$ Lx B$ vf B$ vx vx Lx B$ vf B$ vx vx -- Fix

      -- Decode :: Self -> String -> String
      -- Decodes the first entry in the source then recursively process the rest.
      Ld Ls
        ? ( B= vs @I4 )
          S
          B.
            BT @I2 BD (B* @I2 B% vs @I4) v# -- Decode the first entry
            (B$ vd (B/ vs @I4)) -- Process the rest

-- Expand the compressed dictionary
-- The compressed data must contain a non-zero sentinel in the end.
BT @I8
-- Apply the compressed dictionary to obtain the dict
B$

-- Make the recursive Expand function
B$
-- Fix
Lf B$ Lx B$ vf B$ vx vx Lx B$ vf B$ vx vx

-- Expand :: Self -> Int -> String
Le Lp
  ? (B= vp @I0)
    S
    B.
      BT @I1 BD (B% vp @I4) @SLRDU
      B$ ve (B/ vp @I4)
@I127141

-- Encoded string
@I1154412717868768972170221730546019755545226351143176865580627112794300844804924572604884640394935167588815069261804460746887831610145619366018215216792865044888398984058554677241753969223824249348269074883265350688847908441461949928519935016651816784774759218098607744545060344831031456314554973576756684992313065018545589453641893798771304891579615367358178798484977223596106688083969430259002836826314491982287008967633253091696563339989545740760885335856705825264367886242949341912797408832316740227768048477440897069930769914355435969779972233472882584617766962854596488987390597282275778165721719246312895861375551867786352394780434345014302080943496134926534324798248172724420621534289053368145249407612898889892745456008256714226340876239164849690300217451740310811143641918336293137272643281670829686485869611445354789076042985122733690710649872105548162230290058237358599380796869548608785648318934234089687922303136293072282320374287224600910760170052348018756342269044840671382540152481446459928973000531800696729248472535550544487100383560694839892316834398734616436994706340884208732367573127051056516343644181584647149490570074312817057432035823242322438716426827626089842926876026327132045771768022870523861324888580961117866910697137612167503452232940447144618640426543198476590909570062985028671919456075033652548716615952209064626320395185647509313725498344868002191045173414404985920021094303035781440249411637813516037229685936167048597099219069430574977854383879786681114008240254730893639725219921072861539796893978121012612014790630830551959732584223560382391959970837712688203412768650067612994194440165605616803283066186034654193668973090685003848574197135147314888921930225203482600931142506840873118806074399342365539114805354132904398237782217409427054096616674649994988573176778591355493460767014539463985439293898169150073684053945955936954682751544520557487877241128839120507083232553528126823903205583852598569950704998549726756009524624755337376724792190445316269692156929307398939779466004422686328175810163133529280049285480693469502113759284978216229803417436896960911969000455887362655505752169380953337688196206646748601890392904628140375826051623115090355745852818051112502147021408529601399439639480465587264488240979644407036457069964561381810504951890655676592416276846877008211416211877036216817145955524135953519157712222528985515762287736984274082061783024468724783638286105578622528677165794943367075904744022479675142500


